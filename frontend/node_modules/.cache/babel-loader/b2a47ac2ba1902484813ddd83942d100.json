{"ast":null,"code":"var _jsxFileName = \"/mnt/1660E61660E5FC7D/AK360/REACT/Ecom/frontend/src/context/CartContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport default CartContext;\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let rooturl = \"http://localhost:8000\";\n  let [cartList, setCartList] = useState([]);\n  let [isFetched, setIsFetched] = useState(true);\n\n  let fetchCart = () => {\n    let Token = JSON.parse(localStorage.getItem('authToken')).access;\n    let data;\n    axios.get(rooturl + '/api/cart-list/', {\n      headers: {\n        'Authorization': `Bearer ${Token}`\n      }\n    }).then(res => {\n      data = res.data;\n      setCartList(data);\n    }).catch(err => {\n      console.log(err);\n    });\n\n    if (isFetched) {\n      setIsFetched(false);\n    }\n  };\n\n  let clear = () => {\n    setCartList;\n  };\n\n  useEffect(() => {\n    if (isFetched) {\n      fetchCart();\n    }\n  });\n  let contextData = {\n    cartList: cartList,\n    fetchCart: fetchCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"USIWgG+s27PZt8yX+RI9gX4+0Jg=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/mnt/1660E61660E5FC7D/AK360/REACT/Ecom/frontend/src/context/CartContext.js"],"names":["createContext","useState","useEffect","useContext","axios","CartContext","CartProvider","children","rooturl","cartList","setCartList","isFetched","setIsFetched","fetchCart","Token","JSON","parse","localStorage","getItem","access","data","get","headers","then","res","catch","err","console","log","clear","contextData"],"mappings":";;;AAAA,SACAA,aADA,EAEAC,QAFA,EAGAC,SAHA,EAIAC,UAJA,QAIkB,OAJlB;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AACA,eAAeK,WAAf;AAEA,OAAQ,MAAMC,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAEzC,MAAIC,OAAO,GAAG,uBAAd;AACA,MAAI,CAACC,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,EAAD,CAArC;AACA,MAAI,CAACU,SAAD,EAAWC,YAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAtC;;AAEA,MAAIY,SAAS,GAAC,MAAI;AACd,QAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,EAA8CC,MAA1D;AACA,QAAIC,IAAJ;AACAhB,IAAAA,KAAK,CAACiB,GAAN,CAAUb,OAAO,GAAC,iBAAlB,EAAoC;AAChCc,MAAAA,OAAO,EAAC;AACJ,yBAAiB,UAASR,KAAM;AAD5B;AADwB,KAApC,EAKCS,IALD,CAKMC,GAAG,IAAI;AACTJ,MAAAA,IAAI,GAAGI,GAAG,CAACJ,IAAX;AACAV,MAAAA,WAAW,CAACU,IAAD,CAAX;AACH,KARD,EASCK,KATD,CASOC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAXD;;AAYA,QAAGf,SAAH,EAAa;AACTC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAlBD;;AAoBA,MAAIiB,KAAK,GAAC,MAAI;AACVnB,IAAAA,WAAW;AACd,GAFD;;AAIAR,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIS,SAAJ,EAAc;AACVE,MAAAA,SAAS;AACZ;AACJ,GAJQ,CAAT;AAMA,MAAIiB,WAAW,GAAE;AACbrB,IAAAA,QAAQ,EAACA,QADI;AAEbI,IAAAA,SAAS,EAACA;AAFG,GAAjB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEiB,WAA7B;AAAA,cACKvB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhDO;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { \ncreateContext,     \nuseState,\nuseEffect,\nuseContext } from \"react\";\nimport axios from 'axios';\n\nconst CartContext = createContext()\nexport default CartContext;\n\nexport  const CartProvider = ({children}) => {\n\n    let rooturl = \"http://localhost:8000\"\n    let [cartList,setCartList] = useState([])\n    let [isFetched,setIsFetched]= useState(true)\n\n    let fetchCart=()=>{\n        let Token = JSON.parse(localStorage.getItem('authToken')).access\n        let data ;\n        axios.get(rooturl+'/api/cart-list/',{\n            headers:{\n                'Authorization':`Bearer ${Token}`\n            }\n        })\n        .then(res => {\n            data = res.data;\n            setCartList(data)\n        })\n        .catch(err => {\n            console.log(err)\n        })\n        if(isFetched){\n            setIsFetched(false)\n        }\n    }\n\n    let clear=()=>{\n        setCartList\n    }\n\n    useEffect(()=>{\n        if (isFetched){\n            fetchCart()\n        }\n    })\n\n    let contextData ={\n        cartList:cartList,\n        fetchCart:fetchCart\n\n    }\n\n\n    return(\n        <CartContext.Provider value={contextData}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n    \n    "]},"metadata":{},"sourceType":"module"}