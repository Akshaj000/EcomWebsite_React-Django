{"ast":null,"code":"var _jsxFileName = \"/mnt/1660E61660E5FC7D/AK360/REACT/Ecom/frontend/src/context/CategoryContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { rooturl } from \"../utils/functions\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoryContext = /*#__PURE__*/createContext();\nexport default CategoryContext;\nexport const CategoryProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [categories, setCategories] = useState([1, 3]);\n  let [isFetched, setIsFetched] = useState(true);\n  let Navigate = useNavigate();\n\n  let fetchCategories = () => {\n    let token = token ? JSON.parse(localStorage.getItem('authToken')).access : null;\n    console.log(token);\n    axios.get(rooturl + '/api/category-list/', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      let data = res.data;\n      setCategories(data);\n    });\n\n    if (isFetched) {\n      setIsFetched(false);\n    }\n  };\n\n  let contextData = {\n    categories: categories\n  };\n  useEffect(() => {\n    fetchCategories();\n  });\n  return /*#__PURE__*/_jsxDEV(CategoryContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CategoryProvider, \"c4J9WEOxacWFrthzNSOfioW5Qrk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CategoryProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryProvider\");","map":{"version":3,"sources":["/mnt/1660E61660E5FC7D/AK360/REACT/Ecom/frontend/src/context/CategoryContext.js"],"names":["createContext","useState","useEffect","axios","rooturl","useNavigate","CategoryContext","CategoryProvider","children","categories","setCategories","isFetched","setIsFetched","Navigate","fetchCategories","token","JSON","parse","localStorage","getItem","access","console","log","get","headers","Authorization","then","res","data","contextData"],"mappings":";;;AAAA,SACAA,aADA,EAEAC,QAFA,EAGAC,SAHA,QAGiB,OAHjB;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AACA,MAAMC,eAAe,gBAAGN,aAAa,EAArC;AACA,eAAeM,eAAf;AAGA,OAAQ,MAAMC,gBAAgB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAE7C,MAAI,CAACC,UAAD,EAAYC,aAAZ,IAA6BT,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAAzC;AACA,MAAI,CAACU,SAAD,EAAWC,YAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAtC;AACA,MAAIY,QAAQ,GAAGR,WAAW,EAA1B;;AAEA,MAAIS,eAAe,GAAC,MAAI;AACpB,QAAIC,KAAK,GAAGA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,EAA8CC,MAAjD,GAA2D,IAA5E;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAZ,IAAAA,KAAK,CAACoB,GAAN,CAAUnB,OAAO,GAAC,qBAAlB,EACA;AAACoB,MAAAA,OAAO,EAAC;AACLC,QAAAA,aAAa,EAAM,UAASV,KAAM;AAD7B;AAAT,KADA,EAICW,IAJD,CAIMC,GAAG,IAAI;AACT,UAAIC,IAAI,GAAGD,GAAG,CAACC,IAAf;AACAlB,MAAAA,aAAa,CAACkB,IAAD,CAAb;AACH,KAPD;;AAQA,QAAGjB,SAAH,EAAa;AACTC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAdD;;AAiBA,MAAIiB,WAAW,GAAE;AACbpB,IAAAA,UAAU,EAACA;AADE,GAAjB;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,eAAe;AAClB,GAFQ,CAAT;AAKA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEe,WAAjC;AAAA,cACKrB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCO;;GAAMD,gB;UAIKF,W;;;KAJLE,gB","sourcesContent":["import { \ncreateContext,     \nuseState,\nuseEffect } from \"react\";\nimport axios from 'axios';\nimport { rooturl } from \"../utils/functions\";\nimport { useNavigate } from \"react-router-dom\";\nconst CategoryContext = createContext()\nexport default CategoryContext;\n\n\nexport  const CategoryProvider = ({children}) => {\n\n    let [categories,setCategories] = useState([1,3])\n    let [isFetched,setIsFetched]= useState(true)\n    let Navigate = useNavigate()\n\n    let fetchCategories=()=>{\n        let token = token ? JSON.parse(localStorage.getItem('authToken')).access  : null\n        console.log(token)\n        axios.get(rooturl+'/api/category-list/',\n        {headers:{\n            Authorization  :  `Bearer ${token}`\n        }})\n        .then(res => {\n            let data = res.data;\n            setCategories(data)\n        })\n        if(isFetched){\n            setIsFetched(false)\n        } \n    }\n\n\n    let contextData ={\n        categories:categories\n    }\n\n    useEffect(() => {\n        fetchCategories()\n    })\n\n\n    return(\n        <CategoryContext.Provider value={contextData}>\n            {children}\n        </CategoryContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}